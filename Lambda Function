# -*- coding: utf-8 -*-
# SKill ID: amzn1.ask.skill.d93ff282-8d07-4c98-9209-188cbd66b656

'''
    Project Name: Python Chatbot
    Authors:
            Daniel J Chalmers (danjchalmers@gmail.com)
            Harrison P Duffield (harrisonduffield@gmail.com)
            Girts J Krumins (girtsjk@gmail.com)
    Tools: Amazon Echo API, Python 3.7.3 with AWS, AWS Lambda development
    Physical address of master PC: 98-3B-8F-96-FA-FF
    Location of master PC and Echo device: Coventry, West Midlands, Unitedb Kingdom
    Location of code execution: Amazon Web Services (AWS) Cloud-based Server, N.Virginia, USA
    Time Zone of Echo device: British Summer Time (London)
    Measurment Units of Echo device: Celcius, Kilometers
    Measurement units of DarkSky API: Farenheit
    Websites referenced: DarkSky, Reddit
    Amazon Echo information:
                            Physical address: 34-D2-70-52-E8-84
                            Serial Number: G090LV03645209JT
                            Software Version: 647588720
'''

import json
import time
import logging
import requests
import ask_sdk_core.utils as ask_utils
from ask_sdk_model import Response
from ask_sdk_core.handler_input import HandlerInput
from ask_sdk_core.skill_builder import SkillBuilder
from ask_sdk_core.dispatch_components import AbstractRequestHandler
from ask_sdk_core.dispatch_components import AbstractExceptionHandler

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Class triggered upon skill's launch
class LaunchRequestHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_request_type('LaunchRequest')(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        speak_output = 'Hi Dan!'
        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )

class GetStatusIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name('GetStatusIntent')(handler_input)
        
    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        
        def check_status():
            text = 'Works!'
            return fact_text
            
        outputLine = check_status()
        speak_output = str(outputLine)
        return (
            handler_input.response_builder
            .speak(speak_output)
            .ask(speak_output)
            .response
        )

# Handler for GetWeatherIntent
class GetWeatherIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name('GetWeatherIntent')(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        
        def LocationToCoors(Location,Country):
            url= 'https://geocode.xyz/'+Location+','+Country+'?json=1' #//https://geocode.xyz/api
            JSONReturn = requests.get(url).json()
            LattLong = []
            LattLong.append(JSONReturn['alt']['loc']['longt'])
            LattLong.append(JSONReturn['alt']['loc']['latt'])
            return LattLong

        def WeatherDataRetreival(Loaction,Country):# Location to take format Paris,FR https://darksky.net/poweredby/
            LattLong = LocationToCoors(Loaction,Country) # Latitude = 0 ,Longitutde = 1
            url ='https://api.darksky.net/forecast/60a4da2fceb77dce7d44656141cc6bbf/'+LattLong[1]+","+LattLong[0]
            print(url)
            return requests.get(url).json()
        
        def CurrentTemperature(Location,Country):
            JSONReturn = WeatherDataRetreival(Location,Country)
            return JSONReturn['currently']['temperature']
        
        Location, Country = 'Coventry', 'EN'
        result = (CurrentTemperature(Location,Country))
        result = round((result - 32), 0) # Turn Farenheit into Celcius because we're not American
        result = int(result)
        outputLine = 'In '+str(Location)+' it is '+str(result)+' degrees Celcius'
        speak_output = str(outputLine)
        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )

# Handler for GetFactIntent
class GetFactIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name('GetFactIntent')(handler_input)
        
    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        
        def get_fact():
            user_dict = {'user': '*','passwd': '*','api_type': 'json'}
            session = requests.Session()
            session.headers.update({'User-Agent': 'Testing Alexa'})
            session.post('https://www.reddit.com/api/login', data = user_dict)
            time.sleep(0.5)
            url = 'https://reddit.com/r/todayilearned/.json?limit=1'
            html = session.get(url)
            data = json.loads(html.content.decode('utf-8'))
            fact_data = data['data']['children'][0]['data']
            # All posts start with 'TIL ', so format the string accordingly
            fact_text = (('Today I learned ' + fact_data['title'][4:]).replace('(','').replace(')',''))
            fact_url = fact_data['url']
            return fact_text
            
        outputLine = get_fact()
        speak_output = str(outputLine)
        return (
            handler_input.response_builder
            .speak(speak_output)
            .ask(speak_output)
            .response
        )

class PlayRadioIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        return ask.utils.is_intent_name('PlayRadioIntent')(handler_input)
        
    def handle(self, handler_input):
        speak_output = 'Now playing radio'
        #url = 'http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1_mf_p'
        util.play(url = 'http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio1_mf_p')
        return (
            handler_input.response_builder
            .speak(speak_output)
            .ask(speak_output)
            .response
        )

# This class is an easter egg that speaks Rutger Hauer's famous speech from Bladerunner
class EasterEggIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        #type: (handlerInput) -> bool
        return ask_utils.is_intent_name('EasterEggIntent')(handler_input)
        
    def handle(self, handler_input):
        #type: (HandlerInput) -> Response
        speak_output = 'I’ve seen things you people wouldn’t believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like… tears in rain. Time to die.'
        return (
            handler_input.response_builder
            .speak(speak_output)
            .ask(speak_output)
            .response
        )

# Handler for HelloCreatorIntent
class HelloCreatorIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        #type: (HandlerInput) -> bool
        return ask_utils.is_intent_name('HelloCreatorIntent')(handler_input)
        
    def handle(self, handler_input):
        #type: (HandlerInput) -> Response
        speak_output = 'I was created Dan Chalmers and I was realeased in November of 2019.'
        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )

# Handler for HowAreYouIntent
class HowAreYouIntentHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_intent_name("HowAreYou")(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        speak_output = "I'm good, thank you!"
        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )

class CancelOrStopIntentHandler(AbstractRequestHandler):
    '''Single handler for Cancel and Stop Intent.'''
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return (ask_utils.is_intent_name("AMAZON.CancelIntent")(handler_input) or
                ask_utils.is_intent_name("AMAZON.StopIntent")(handler_input))
                
    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        speak_output = "Goodbye!"
        return (
            handler_input.response_builder
                .speak(speak_output)
                .ask(speak_output)
                .response
        )

# Handler to close the session and end the program
class SessionEndedRequestHandler(AbstractRequestHandler):
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_request_type('SessionEndedRequest')(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        return handler_input.response_builder.response

# Final class allows the session to stay open after a handler call
class IntentReflectorHandler(AbstractRequestHandler):
    '''The intent reflector is used for interaction model testing and debugging.
    It will simply repeat the intent the user said.'''
    def can_handle(self, handler_input):
        # type: (HandlerInput) -> bool
        return ask_utils.is_request_type('IntentRequest')(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -> Response
        intent_name = ask_utils.get_intent_name(handler_input)
        speak_output = 'You just triggered ' + intent_name + '.'
        return (
            handler_input.response_builder
                .speak(speak_output)
                .response
        )

#-----------------------------------------------------------------------------------------------------------------------------------------

sb = SkillBuilder()

sb.add_request_handler(LaunchRequestHandler())
sb.add_request_handler(GetStatusIntentHandler())
sb.add_request_handler(GetWeatherIntentHandler())
sb.add_request_handler(GetFactIntentHandler())
sb.add_request_handler(PlayRadioIntentHandler())
sb.add_request_handler(EasterEggIntentHandler())
sb.add_request_handler(HelloCreatorIntentHandler())
sb.add_request_handler(HowAreYouIntentHandler())
sb.add_request_handler(CancelOrStopIntentHandler())
sb.add_request_handler(SessionEndedRequestHandler())
sb.add_request_handler(IntentReflectorHandler())

lambda_handler = sb.lambda_handler()
